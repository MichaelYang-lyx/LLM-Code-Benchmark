import torch
import torch.nn as nn
import torchvision
import torchvision.transforms as transforms

class ImageClassifier(nn.Module):
    def __init__(self, input_size, num_classes):
        super(ImageClassifier, self).__init__()
        self.conv = nn.Conv2d(input_size, 32, kernel_size=3, stride=1, padding=1)
        self.fc = nn.Linear(32*16*16, num_classes)

    def forward(self, x):
        # 1. 使用`self.conv`对输入`x`进行卷积操作。
        x = self.conv(x)

        # 2. 对卷积的结果进行ReLU激活函数操作。
        x = torch.relu(x)

        # 3. 对激活函数的结果进行平均池化操作。
        # 注意：这里假设输入图像大小为32x32，且卷积后的特征图大小为32x32x32。
        x = torch.nn.functional.avg_pool2d(x, kernel_size=2)

        # 4. 将池化的结果展平(flatten)。
        # 注意：这里假设经过池化后的特征图大小为16x16x32。
        x = x.view(x.size(0), -1)

        # 5. 使用`self.fc`对展平的结果进行线性变换。
        x = self.fc(x)

        # 6. 将线性变换的结果返回。
        return x

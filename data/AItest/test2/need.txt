import torch
import torch.nn as nn
import torchvision
import torchvision.transforms as transforms

class ImageClassifier(nn.Module):
    def __init__(self, input_size, num_classes):
        super(ImageClassifier, self).__init__()
        self.conv = nn.Conv2d(input_size, 32, kernel_size=3, stride=1, padding=1)
        self.fc = nn.Linear(32*32*32, num_classes)

    def forward(self, x):
        """
        输入:
        - x: 一个形状为(batch_size, input_size, height, width)的PyTorch张量。

        输出:
        - out: 一个形状为(batch_size, num_classes)的PyTorch张量，表示图像分类模型的输出。
        """
        """
        TODO:
        1. 使用`self.conv`对输入`x`进行卷积操作。
        2. 对卷积的结果进行ReLU激活函数操作。
        3. 对激活函数的结果进行平均池化操作。
        4. 将池化的结果展平(flatten)。
        5. 使用`self.fc`对展平的结果进行线性变换。
        6. 将线性变换的结果返回。

         注意:
        - 你应该使用`self.conv`和`self.fc`来进行计算。
        - 不要使用任何形式的循环，包括for循环和while循环。
        - 不要使用`.item()`，它会使得你的代码无法进行梯度反向传播。
        """

